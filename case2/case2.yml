version: '3.4'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  env_file: 
    - .env
  volumes:
    - $PWD/volumes/airflow-data/dags:/opt/airflow/dags
    - $PWD/volumes/airflow-data/logs:/opt/airflow/logs
    - $PWD/volumes/airflow-data/plugins:/opt/airflow/plugins
    - $PWD/volumes/airflow-data/airflow.cfg:/opt/airlfow/airflow.cfg
  networks:
    - datanet
  extra_hosts:
    - "host.docker.internal:host-gateway"
  
  
x-airflow-depends-on:
  &airflow-depends-on
  depends_on:
    airflow_db:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully
 
services:
  postgres:
    container_name: postgresql
    image: postgres:13.0-alpine
    ports:
      - 5432:5432
    volumes:
      - $PWD/volumes/postgres/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql
      - $PWD/volumes/postgres/sources:/var/lib/postgresql/sources
    environment:
      - POSTGRES_USER=${POSTGRESQL_USER}
      - POSTGRES_PASSWORD=${POSTGRES_USER_PASSWORD}
      - POC_PASSWORD=${DATABASE_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "poc" ]
      interval: 5s
      retries: 5
    networks:
      - datanet

  airflow_db:
    container_name: airflow_db_
    image: postgres:11
    environment:
      - POSTGRES_USER=${AIRFLOW_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_POSTGRES_DB}
    ports:
      - 5433:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - datanet

  airflow-scheduler:
    <<: *airflow-common
    <<: *airflow-depends-on
    container_name: airflow_scheduler_
    command: scheduler
    restart: on-failure
    ports:
      - 8793:8793
    networks:
      - datanet

  airflow-webserver:
    <<: *airflow-common
    <<: *airflow-depends-on
    container_name: airflow_webserver_
    restart: always
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - datanet

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init_
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /airflow-data/logs /airflow-data/dags /airflow-data/plugins
        chown -R "${AIRFLOW_UID}:0" /airflow-data/{logs,dags,plugins}
        exec /entrypoint airflow version
    networks:
      - datanet

  trino-coordinator:
    container_name: trino_
    image: trinodb/trino:latest
    hostname: trino-coordinator
    ports:
      - 8085:8080
    volumes:
      - $PWD/volumes/trino/etc:/usr/lib/trino/etc:ro
      - $PWD/volumes/trino/catalog:/etc/trino/catalog
    networks:
      - datanet

  jupyter_lab:
    container_name: jupyter_lab_
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports: 
      - 8888:8888
    environment: 
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=easy
    volumes:
      - $PWD/volumes/jupyter/work:/home/jovyan/work
    networks:
      - datanet

  pgadmin:
    container_name: pg_admin_
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - 16543:80
    networks:
      - datanet

networks:
  datanet:
    driver: bridge

volumes:
  pgdata: